What happens when you initialize a repository? Why do you need to do it?

        It'll create new .git folder to save lot of things about git.
        Because I need to create new repository

How is the staging area different from the working directory and the repository?
What value do you think it offers?

        Working directory list all file in the current directory, staging area only
        list files that we are adding to it, before we finally commit to repository,
        and staging area is like experimental folder before we finally decided to
        publish to repository which is our final folder. It offers you to modify
        all the things before finally push it to repo

How can you use the staging area to make sure you have one commit per logical change?

        After changing one logical change, i can add the file to the staging area,
        then afterwards i can compare what's in staging area and what's in repo,
        and check whether i add too much logical change for just one commit or vice
        versa

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

        Example when we want to add bunch of features, instead of adding in one
        branch, we can split into few branch so we can focus on testing each
        features. Then when the features is working perfectly, we can merging
        branch. Branch really help me spread my big work into smaller work so 
        i can focus on each small features that i want to add then i can merging
        all branch when features is working perfectly

How do the diagrams help you visualize the branch structure?

        Because image and other visual style like diagram create better understanding
        rather than just some kind of multiline text

What is the result of merging two branches together? Why do we represent it in the
diagram the way we do?

        Branch become one and we can see all the previous branchs parent commit in log
        even after we delete one of them, and Head is moved to the newly merging branch.
        So it makes clear and easy to understand about branching in git.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

        With automatic merging, we just merge 2 branch and done, no need to work, but
        the cons is it can be a conflict. With manual merge we must set up which code
        we want to merge, but it gives versatile so it won't be any conflict