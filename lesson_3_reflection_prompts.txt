When would you want to use a remote repository rather than keeping all your work local?

    When I want to practice to use Git and Github, when I want to publish my work so
    other people can see and edit my work, and when I need to work with other people,
    so it's very easy to collaborate. Another thing is when I want to backup my work.


Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

    Because we are not always want to have everything on our local same as everything
    on the remote. It all depends on how we work, and if Git is automatically stay
    up-to-date with everything on the remote, we might can't have an experiment or
    trying new things, fixing bug etc.

Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

    Fork is cloning a repository from and to github, clone is duplicating a repository
    from local to github or vice versa, and branch is a subsidiary or chapter of a
    repository, or we can just call it a branch. We use fork when we want to clone
    someones repository to ours in github, or ours repository to ours organization
    repository or vice versa. We use clone when we want to clone someones or ours 
    repository to local, or from local to our github. We use branch if we want to
    make another path for our work, like when we trying experiment with adding some
    features or adding another version of the project.

What is the benefit of having a copy of the last known state of the remote stored locally?

    We always up to date of whatever in the remote. Also we can compare with newer commit
    by someone/ourself before we push our local commit.

How would you collaborate without using Git or GitHub? What would be easier, and what
would be harder?

    Maybe using email and cloud file storage like google drive, dropbox etc. Using git and
    github would be easier, and without them life would be harder :(

When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

    When I want to add new features or just experiment, and i want to keep the master
    bug-free and perfect. Editing directly in master is faster because we just need to
    push and pull, but master branch will be affected if there is any kind of bug. So
    we use another branch to test out and merge later if we need to and fix any conflict.